
#version 430  // Version of OpenGL with COMPUTE shader support

layout (local_size_x = 1, local_size_y = 128, local_size_z = 1) in; // Declares thread group size

const int blurFactor = 20;

//spatial kernel (same as blur earlier in the semester)
uniform blurKernel {float weights[blurFactor * 2 + 1]; }; // Declares a uniform block


////uses shadowTexture[0] as input and its in format RGBA32F
//layout (rgba16f) uniform readonly image2D depthMap;


//uses SSAOBlurTexture[0] as input and its in format R32F
layout (rgba16f) uniform readonly image2D positionMap;

//uses GBufferTexture[1] as input and its in format RGBA16F
layout (rgba16f) uniform readonly image2D normalMap;

//uses SSAOBlurTexture[1] as output and its in format R32F
layout (r32f) uniform writeonly image2D dst;

layout (r32f) uniform readonly image2D SSAOMap;


const float PI = 3.1415926535897932384626433832795;

shared float sharedDepthVar[128 + (blurFactor * 2) + 1]; // Variable shared with other threads in the 128x1 thread group2
shared vec4 sharedNormalVar[128 + (blurFactor * 2) + 1]; // Variable shared with other threads in the 128x1 thread group2
shared float sharedSSAOVar[128 + (blurFactor * 2) + 1]; // Variable shared with other threads in the 128x1 thread group2


uniform float SSAOBlurScalar = 0.01f;


// This matrix holds the model-to-view transform
uniform mat4  viewMatrix;

// This matrix holds the projection matrix
uniform mat4  projectionMatrix;


vec3 worldToNDC(vec3 pos)
{
  vec4 offset = vec4(pos, 1.0);
  offset      = projectionMatrix * viewMatrix * offset;    // from view to clip-space
  offset.xyz /= offset.w;               // perspective divide
  offset.xyz  = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0 
  return offset.xyz;
}
void main()
{

  ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
  uint invocID = gl_LocalInvocationID.y; // Local thread id in the 128x1 thread groups128x1

  sharedDepthVar[invocID] =  worldToNDC(imageLoad(positionMap, gpos + ivec2(0, - blurFactor)).xyz).z; // read an image pixel at an ivec2(.,.) position
  sharedNormalVar[invocID] = imageLoad(normalMap, gpos + ivec2(0, - blurFactor));
  sharedSSAOVar[invocID] = imageLoad(SSAOMap, gpos + ivec2(0, - blurFactor)).r;

  if (invocID < 2.0f * blurFactor)
  {
    sharedDepthVar[invocID + 128] =  worldToNDC(imageLoad(positionMap, gpos + ivec2(0,128 - blurFactor)).xyz).z; // read extra 2*w pixels
    sharedNormalVar[invocID + 128] = imageLoad(normalMap, gpos + ivec2(0,128 - blurFactor));
    sharedSSAOVar[invocID + 128] = imageLoad(SSAOMap, gpos + ivec2(0,128 - blurFactor)).r;
  }

  barrier(); // Wait for all threads to catchup before reading sharedVar[]
  
  //float B = 1/(blurFactor * 2 + 1);
  //float s = blurFactor / 2;
  float w = 0;
  float w2 = 0;
  //for i in rance -w to w so 2w + 1
  //Compute sum of weights[0 … 2w] times corresponding pixels v[i … i+2w]
  //W(xi,x) = R(xi,x) * S(xi, x)
  //S = weights from gaussian vlur
  //R = range kernel

  float depth = sharedDepthVar[invocID + blurFactor];       //d
  vec3 normal = sharedNormalVar[invocID + blurFactor].xyz;

  for(uint i = invocID; i < invocID + (blurFactor * 2); ++i)
  {
    
    vec3 normal_i = sharedNormalVar[i].xyz; //Ni
    float depth_i = sharedDepthVar[i];      //di
    float SSAOvalue_i = sharedSSAOVar[i];

    float exponent = -((depth_i - depth) * (depth_i - depth)) / (2.0f * SSAOBlurScalar);
    float R = max(dot(normal,normal_i),0) * (1.0f / (sqrt(2.0f * PI * SSAOBlurScalar))) * exp(exponent);
    
    w += max(R * weights[i - invocID],0) * SSAOvalue_i;  
    w2 += max(R * weights[i - invocID],0);
    
  }

  imageStore(dst, gpos, vec4(w/w2,0,0,0)); // Write to destination image
  //imageStore(dst, gpos, vec4(normal,0)); // Write to destination image

}